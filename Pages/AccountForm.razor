@page "/account/{id?}"
@using BlazorAccounting.Data
@using Microsoft.AspNetCore.Identity;
@inject AccountService accountService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore

@attribute [Authorize]

<PageTitle>Account</PageTitle>

<h1>Account</h1>

<MudPaper Class="pa-3">
    <EditForm Model="@account" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <CustomValidation Errors="@Errors" />

        <MudTextField Label="Code" Validation="@(RequiredFieldValidation)" @bind-Value="account.Code" />
        <MudTextField Label="Name" Validation="@(RequiredFieldValidation)" @bind-Value="account.Name" />
        <MudSelect T="AccountType" Label="Account Type">
            @foreach (AccountType accountType in Enum.GetValues(typeof(AccountType)))
            {
                <MudSelectItem T="AccountType" Value="@accountType" />
            }
        </MudSelect>

        <MudButton Class="mt-2" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary">
            Save
        </MudButton>

    </EditForm>
</MudPaper>

@code {

    [Parameter]
    public string id { get; set; }

    private Account account = new();
    private RequiredAttribute RequiredFieldValidation = new RequiredAttribute() { ErrorMessage = "This field is required" };
    private string[]? Errors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(id))
        {
            account = await accountService.GetByIDAsync( int.Parse(id) );
        }
    }

    private async void HandleValidSubmit()
    {
        Errors = null;
        if (!String.IsNullOrEmpty(id))
        {
            accountService.Update(account);
        }
        else
        {
            await accountService.InsertAsync(account);
        }

        try
        {
            await accountService.SaveChangesAsync();
            Snackbar.Add("Saved successfully", Severity.Success);
            NavigationManager.NavigateTo("/accounts");
        }
        catch (DbUpdateException ex)
        {
            if (ex.InnerException.Message.Contains("duplicate"))
            {
                Errors = new string[] { "Code is already taken." };
                StateHasChanged();
            }
            else
            {
                Errors = new string[] { "Data validation failed" };
                StateHasChanged();
            }
        }
        catch (Exception ex )
        {
            Errors = new string[] { "Server error occurred. Please contact support" };
            StateHasChanged();
        }
    }
}
